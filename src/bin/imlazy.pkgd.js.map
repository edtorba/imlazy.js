{"version":3,"sources":["webpack:///imlazy.pkgd.js","webpack:///webpack/bootstrap 4861921ec9d6513272c0","webpack:///./index.js","webpack:///./shim/object.assign.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","GUID","instances","Imlazy","config","this","assign","offset","document","documentElement","clientHeight","retina","events","guid","onChange","debounce","addEventListeners","fetch","_this","windowWidth","clientWidth","windowHeight","imageList","querySelectorAll","forEach","image","imlazyGUID","isElementVisible","load","window","addEventListener","body","_this2","_this3","jsonString","getAttribute","data","JSON","parse","e","console","error","nearestBreakpoint","breakpoint","parseInt","imageURL","isHighDensity","DPR","getDevicePixelRation","Math","round","setRetinaSuffix","HTMLImageElement","setAttribute","onload","evt","classList","add","dispatchEvent","onerror","style","backgroundImage","slice","replace","Image","string","substring","lastIndexOf","matchMedia","mq","matches","devicePixelRatio","element","top","getBoundingClientRect","bottom","type","listener","hasOwnProperty","push","index","indexOf","splice","args","t","apply","nodeList","callback","imageCounter","on","node","func","wait","immediate","_arguments","arguments","_this4","timeout","callNow","clearTimeout","setTimeout","default","source","src"],"mappings":"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","file":"imlazy.pkgd.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/bin/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// Globally unique identifiers.\n\tvar GUID = 0;\n\t\n\t// List of imlazy instances.\n\tvar instances = {};\n\t\n\tvar Imlazy = function () {\n\t  function Imlazy(config) {\n\t    _classCallCheck(this, Imlazy);\n\t\n\t    this.config = Object.assign({\n\t      offset: document.documentElement.clientHeight,\n\t      retina: false\n\t    }, config);\n\t\n\t    // Initial properties.\n\t    this.events = {};\n\t\n\t    // Create GUID and push it to instances object.\n\t    this.guid = GUID++;\n\t    instances[this.guid] = this;\n\t\n\t    // Limit the rate at which a function can fire.\n\t    this.onChange = this.debounce(this.onChange, 100);\n\t\n\t    // Register listeners.\n\t    this.addEventListeners();\n\t\n\t    // Fetch imlazy DOM nodes.\n\t    this.fetch();\n\t  }\n\t\n\t  /**\r\n\t   * Get imlazy DOM nodes, and lazyload images.\r\n\t   * @return {void}\r\n\t   */\n\t\n\t\n\t  _createClass(Imlazy, [{\n\t    key: 'fetch',\n\t    value: function fetch() {\n\t      var _this = this;\n\t\n\t      this.windowWidth = document.documentElement.clientWidth;\n\t      this.windowHeight = document.documentElement.clientHeight;\n\t      this.imageList = document.querySelectorAll('[data-imlazy]');\n\t\n\t      // As NodeList.forEach is not supported in IE, we'll use\n\t      //  Array.prototype.forEach instead.\n\t      [].forEach.call(this.imageList, function (image) {\n\t        // Add GUID to imlazy images.\n\t        image.imlazyGUID = _this.guid;\n\t\n\t        if (_this.isElementVisible(image)) _this.load(image);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * Register event listeners.\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'addEventListeners',\n\t    value: function addEventListeners() {\n\t      window.addEventListener('resize', this.onChange);\n\t      window.addEventListener('scroll', this.onChange);\n\t      document.body.addEventListener('scroll', this.onChange);\n\t    }\n\t\n\t    /**\r\n\t     * On change event listener, checks if images are in view and loads them if\r\n\t     *  needed.\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'onChange',\n\t    value: function onChange() {\n\t      var _this2 = this;\n\t\n\t      this.windowWidth = document.documentElement.clientWidth;\n\t      this.windowHeight = document.documentElement.clientHeight;\n\t\n\t      [].forEach.call(this.imageList, function (image) {\n\t        if (_this2.isElementVisible(image)) _this2.load(image);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * Load image on supplied element.\r\n\t     *\r\n\t     * @param {HTMLElement} target [HTML element.]\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'load',\n\t    value: function load(target) {\n\t      var _this3 = this;\n\t\n\t      var jsonString = target.getAttribute('data-imlazy'),\n\t          data = void 0;\n\t\n\t      try {\n\t        data = JSON.parse(jsonString);\n\t      } catch (e) {\n\t        console.error('[imlazy] JSON.parse: %s', e);\n\t        return; // run forest, run!\n\t      }\n\t\n\t      // Find nearest breakpoint.\n\t      var nearestBreakpoint = void 0;\n\t\n\t      for (var value in data) {\n\t        var breakpoint = parseInt(value, 10);\n\t        if (breakpoint <= this.windowWidth) nearestBreakpoint = breakpoint;\n\t      }\n\t\n\t      var imageURL = data[nearestBreakpoint];\n\t\n\t      if (this.config.retina) {\n\t        if (this.isHighDensity()) {\n\t          var DPR = this.getDevicePixelRation();\n\t          DPR = Math.round(DPR);\n\t\n\t          if (DPR !== 1) {\n\t            if (DPR > this.config.retina && typeof this.config.retina !== 'boolean') {\n\t              imageURL = this.setRetinaSuffix(imageURL, this.config.retina);\n\t            } else {\n\t              imageURL = this.setRetinaSuffix(imageURL, DPR);\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      if (target instanceof HTMLImageElement) {\n\t        // Image.\n\t\n\t        // Ensure that we have not loaded same image previously.\n\t        if (target.getAttribute('src') === imageURL) return;\n\t        target.setAttribute('src', imageURL);\n\t\n\t        target.onload = function (evt) {\n\t          target.classList.add('is-loaded');\n\t          _this3.dispatchEvent('loaded', [evt, target]);\n\t        };\n\t\n\t        target.onerror = function (evt) {\n\t          console.error('[imlazy] A resource failed to load: %s', imageURL);\n\t          _this3.dispatchEvent('loaded', [evt, target]);\n\t        };\n\t      } else {\n\t        // Other HTML element.\n\t\n\t        // Ensure that we have not loaded same image previously.\n\t        if (target.style.backgroundImage.slice(4, -1).replace(/\"/g, \"\") === imageURL) return;\n\t\n\t        // Create fake image to use its `load` and `error` events.\n\t        var image = new Image();\n\t        image.setAttribute('src', imageURL);\n\t\n\t        // Place image on HTML element at the same time.\n\t        target.style.backgroundImage = 'url(' + imageURL + ')';\n\t\n\t        image.onload = function (evt) {\n\t          target.classList.add('is-loaded');\n\t          _this3.dispatchEvent('loaded', [null, target]);\n\t        };\n\t\n\t        image.onerror = function (evt) {\n\t          console.error('[imlazy] A resource failed to load: %s', imageURL);\n\t          _this3.dispatchEvent('loaded', [null, target]);\n\t        };\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Add suffix to image url string.\r\n\t     * @param {string} string [Image url.]\r\n\t     * @param {string} value  [Suffix to add.]\r\n\t     * @return {string} [String with suffix.]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setRetinaSuffix',\n\t    value: function setRetinaSuffix(string, value) {\n\t      return string.substring(0, string.lastIndexOf(\".\")) + '@' + value + 'x' + string.substring(string.lastIndexOf(\".\"));\n\t    }\n\t\n\t    /**\r\n\t     * Detect high density screens.\r\n\t     * @source http://stackoverflow.com/a/19690464\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'isHighDensity',\n\t    value: function isHighDensity() {\n\t      if (window.matchMedia) {\n\t        var mq = window.matchMedia(\"only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)\");\n\t        return mq && mq.matches || window.devicePixelRatio > 1;\n\t      }\n\t\n\t      return false;\n\t    }\n\t\n\t    /**\r\n\t     * Check whether element is in view.\r\n\t     * @param  {HTMLElement}  element [DOM node.]\r\n\t     * @return {Boolean} [Test results.]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'isElementVisible',\n\t    value: function isElementVisible(element) {\n\t      var top = element.getBoundingClientRect().top,\n\t          bottom = element.getBoundingClientRect().bottom;\n\t\n\t      if (this.config.offset) {\n\t        return bottom > 0 - this.config.offset && top < this.windowHeight + this.config.offset;\n\t      } else {\n\t        return bottom > 0 && top < this.windowHeight;\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Return device pixel ratio.\r\n\t     * @return {decimal} [DPR.]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevicePixelRation',\n\t    value: function getDevicePixelRation() {\n\t      // Shim; Chances of a device that runs IE < 11 having a DPR of more than\n\t      //  1 are low enough that this is likely to offer the best reliability.\n\t      if (!window.devicePixelRatio) {\n\t        window.devicePixelRatio = 1;\n\t      }\n\t\n\t      return window.devicePixelRatio;\n\t    }\n\t\n\t    /**\r\n\t     * Bind event listener.\r\n\t     *\r\n\t     * @param  {string} name [String representing the event type to listen for.]\r\n\t     * @param  {function} listener [The object that receives a notification.]\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(type, listener) {\n\t      if (this.events.hasOwnProperty(type)) {\n\t        this.events[type].push(listener);\n\t      } else {\n\t        this.events[type] = [listener];\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Unbind event listener.\r\n\t     *\r\n\t     * @param  {string} name [String representing the event type to listen for.]\r\n\t     * @param  {function} listener [The object that receives a notification.]\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(type, listener) {\n\t      if (!this.events.hasOwnProperty(type)) return;\n\t\n\t      var index = this.events[type].indexOf(listener);\n\t      if (index !== -1) this.events[type].splice(index, 1);\n\t    }\n\t\n\t    /**\r\n\t     * Dispatch the event.\r\n\t     *\r\n\t     * @param  {string} name [String representing the event type to listen for.]\r\n\t     * @param  {array} args [Adding custom data to be retured to listener.]\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'dispatchEvent',\n\t    value: function dispatchEvent(type, args) {\n\t      if (!this.events.hasOwnProperty(type)) return;\n\t\n\t      if (!args || !args.length) args = [];\n\t\n\t      var events = this.events[type];\n\t      for (var i = 0, t = events.length; i < t; i++) {\n\t        events[i].apply(null, args);\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Detect when images have been loaded.\r\n\t     * @param  {nodelist} nodeList [NodeList.]\r\n\t     * @param  {Function} callback [Function triggered after all images have been loaded.]\r\n\t     * @return {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'imagesLoaded',\n\t    value: function imagesLoaded(nodeList, callback) {\n\t      var imageCounter = 0;\n\t\n\t      this.on('loaded', function (evt, target) {\n\t        [].forEach.call(nodeList, function (node) {\n\t          if (node === target) {\n\t            imageCounter++;\n\t\n\t            if (nodeList.length === imageCounter) {\n\t              callback.apply(null, [nodeList]);\n\t              imageCounter = 0;\n\t            }\n\t          }\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * Creates a debounced function that delays invoking func until after wait\r\n\t     *  milliseconds have elapsed since the last time the debounced function was\r\n\t     *  invoked.\r\n\t     *\r\n\t     * @param  {function} func [Function to debounce.]\r\n\t     * @param  {integer} wait [To to wait.]\r\n\t     * @param  {boolean} immediate [Immediately invode function.]\r\n\t     * @return {function} [Debounced function.]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'debounce',\n\t    value: function debounce(func, wait, immediate) {\n\t      var _arguments = arguments,\n\t          _this4 = this;\n\t\n\t      var timeout = void 0;\n\t\n\t      return function () {\n\t        var args = _arguments,\n\t            callNow = immediate && !timeout;\n\t\n\t        clearTimeout(timeout);\n\t\n\t        timeout = setTimeout(function () {\n\t          timeout = null;\n\t\n\t          if (!immediate) func.apply(_this4, args);\n\t        }, wait);\n\t\n\t        if (callNow) func.apply(_this4, args);\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return Imlazy;\n\t}();\n\t\n\t/**\r\n\t * Get imlazy instance via it's element.\r\n\t *\r\n\t * @param {HTMLElement} element [HTML element.]\r\n\t * @return {Imlazy} [Imlazy instance.]\r\n\t */\n\t\n\t\n\tImlazy.data = function (element) {\n\t  // Make sure it's not empty.\n\t  if (element !== null) {\n\t    var id = element.imlazyGUID;\n\t    return instances[id];\n\t  } else {\n\t    console.error('[imlazy] could not get Imlazy instance from %s', element);\n\t  }\n\t};\n\t\n\t// Replace/Create the global namespace\n\twindow.Imlazy = Imlazy;\n\t\n\texports.default = Imlazy;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\r\n\t * Polyfill for `object.assign`.\r\n\t *\r\n\t * @link https://polyfill.io/v2/docs/features/#Object_assign\r\n\t */\n\tif (!('assign' in Object)) {\n\t  Object.assign = function assign(target, source) {\n\t    // eslint-disable-line no-unused-vars\n\t    for (var index = 1, key, src; index < arguments.length; ++index) {\n\t      src = arguments[index];\n\t\n\t      for (key in src) {\n\t        if (Object.prototype.hasOwnProperty.call(src, key)) {\n\t          target[key] = src[key];\n\t        }\n\t      }\n\t    }\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// imlazy.pkgd.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4861921ec9d6513272c0","import './shim/object.assign';\r\n\r\n// Globally unique identifiers.\r\nlet GUID = 0;\r\n\r\n// List of imlazy instances.\r\nlet instances = {};\r\n\r\nclass Imlazy {\r\n  constructor(config) {\r\n    this.config = Object.assign({\r\n      offset: document.documentElement.clientHeight,\r\n      retina: false\r\n    }, config);\r\n\r\n    // Initial properties.\r\n    this.events = {};\r\n\r\n    // Create GUID and push it to instances object.\r\n    this.guid = GUID++;\r\n    instances[this.guid] = this;\r\n\r\n    // Limit the rate at which a function can fire.\r\n    this.onChange = this.debounce(this.onChange, 100);\r\n\r\n    // Register listeners.\r\n    this.addEventListeners();\r\n\r\n    // Fetch imlazy DOM nodes.\r\n    this.fetch();\r\n  }\r\n\r\n  /**\r\n   * Get imlazy DOM nodes, and lazyload images.\r\n   * @return {void}\r\n   */\r\n  fetch() {\r\n    this.windowWidth = document.documentElement.clientWidth;\r\n    this.windowHeight = document.documentElement.clientHeight;\r\n    this.imageList = document.querySelectorAll('[data-imlazy]');\r\n\r\n    // As NodeList.forEach is not supported in IE, we'll use\r\n    //  Array.prototype.forEach instead.\r\n    [].forEach.call(this.imageList, image => {\r\n      // Add GUID to imlazy images.\r\n      image.imlazyGUID = this.guid;\r\n\r\n      if (this.isElementVisible(image)) this.load(image);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register event listeners.\r\n   * @return {void}\r\n   */\r\n  addEventListeners() {\r\n    window.addEventListener('resize', this.onChange);\r\n    window.addEventListener('scroll', this.onChange);\r\n    document.body.addEventListener('scroll', this.onChange);\r\n  }\r\n\r\n  /**\r\n   * On change event listener, checks if images are in view and loads them if\r\n   *  needed.\r\n   * @return {void}\r\n   */\r\n  onChange() {\r\n    this.windowWidth = document.documentElement.clientWidth;\n    this.windowHeight = document.documentElement.clientHeight;\n\r\n    [].forEach.call(this.imageList, image => {\r\n      if (this.isElementVisible(image)) this.load(image);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load image on supplied element.\r\n   *\r\n   * @param {HTMLElement} target [HTML element.]\r\n   * @return {void}\r\n   */\r\n  load(target) {\r\n    let jsonString = target.getAttribute('data-imlazy'),\r\n    data;\r\n\r\n    try {\r\n      data = JSON.parse(jsonString);\r\n    } catch(e) {\r\n      console.error('[imlazy] JSON.parse: %s', e);\r\n      return; // run forest, run!\r\n    }\r\n\r\n    // Find nearest breakpoint.\r\n    let nearestBreakpoint;\r\n\r\n    for (let value in data) {\r\n      let breakpoint = parseInt(value, 10);\r\n      if (breakpoint <= this.windowWidth) nearestBreakpoint = breakpoint;\r\n    }\r\n\r\n    let imageURL = data[nearestBreakpoint];\r\n\r\n    if (this.config.retina) {\r\n      if (this.isHighDensity()) {\r\n        let DPR = this.getDevicePixelRation();\r\n        DPR = Math.round(DPR);\r\n\r\n        if (DPR !== 1) {\r\n          if (DPR > this.config.retina && typeof this.config.retina !== 'boolean') {\r\n            imageURL = this.setRetinaSuffix(imageURL, this.config.retina);\r\n          } else {\r\n            imageURL = this.setRetinaSuffix(imageURL, DPR);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (target instanceof HTMLImageElement) {\r\n      // Image.\r\n\r\n      // Ensure that we have not loaded same image previously.\r\n      if (target.getAttribute('src') === imageURL) return;\r\n      target.setAttribute('src', imageURL);\r\n\r\n      target.onload = (evt) => {\r\n        target.classList.add('is-loaded');\r\n        this.dispatchEvent('loaded', [ evt, target ]);\r\n      };\r\n\r\n      target.onerror = (evt) => {\r\n        console.error('[imlazy] A resource failed to load: %s', imageURL);\r\n        this.dispatchEvent('loaded', [ evt, target ]);\r\n      };\r\n    } else {\r\n      // Other HTML element.\r\n\r\n      // Ensure that we have not loaded same image previously.\r\n      if (target.style.backgroundImage.slice(4, -1).replace(/\"/g, \"\") === imageURL) return;\r\n\r\n      // Create fake image to use its `load` and `error` events.\r\n      const image = new Image();\r\n      image.setAttribute('src', imageURL);\r\n\r\n      // Place image on HTML element at the same time.\r\n      target.style.backgroundImage = 'url('+ imageURL +')';\r\n\r\n      image.onload = (evt) => {\r\n        target.classList.add('is-loaded');\r\n        this.dispatchEvent('loaded', [ null, target ]);\r\n      };\r\n\r\n      image.onerror = (evt) => {\r\n        console.error('[imlazy] A resource failed to load: %s', imageURL);\r\n        this.dispatchEvent('loaded', [ null, target ]);\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add suffix to image url string.\r\n   * @param {string} string [Image url.]\r\n   * @param {string} value  [Suffix to add.]\r\n   * @return {string} [String with suffix.]\r\n   */\r\n  setRetinaSuffix(string, value) {\r\n    return string.substring(0, string.lastIndexOf(\".\")) + '@' + value + 'x' + string.substring(string.lastIndexOf(\".\"));\r\n  }\r\n\r\n  /**\r\n   * Detect high density screens.\r\n   * @source http://stackoverflow.com/a/19690464\r\n   * @return {void}\r\n   */\r\n  isHighDensity() {\r\n    if (window.matchMedia) {\r\n      var mq = window.matchMedia(\"only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)\");\r\n      return (mq && mq.matches || (window.devicePixelRatio > 1));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check whether element is in view.\r\n   * @param  {HTMLElement}  element [DOM node.]\r\n   * @return {Boolean} [Test results.]\r\n   */\r\n  isElementVisible(element) {\r\n    const top = element.getBoundingClientRect().top,\r\n    bottom = element.getBoundingClientRect().bottom;\r\n\r\n    if (this.config.offset) {\r\n      return bottom > (0 - this.config.offset) && top < (this.windowHeight + this.config.offset);\r\n    } else {\r\n      return bottom > 0 && top < this.windowHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return device pixel ratio.\r\n   * @return {decimal} [DPR.]\r\n   */\r\n  getDevicePixelRation() {\r\n    // Shim; Chances of a device that runs IE < 11 having a DPR of more than\r\n    //  1 are low enough that this is likely to offer the best reliability.\r\n    if (!window.devicePixelRatio) {\r\n      window.devicePixelRatio = 1;\r\n    }\r\n\r\n    return window.devicePixelRatio;\r\n  }\r\n\r\n  /**\r\n   * Bind event listener.\r\n   *\r\n   * @param  {string} name [String representing the event type to listen for.]\r\n   * @param  {function} listener [The object that receives a notification.]\r\n   * @return {void}\r\n   */\r\n  on(type, listener) {\r\n    if (this.events.hasOwnProperty(type)) {\r\n      this.events[type].push(listener);\r\n    } else {\r\n      this.events[type] = [listener];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind event listener.\r\n   *\r\n   * @param  {string} name [String representing the event type to listen for.]\r\n   * @param  {function} listener [The object that receives a notification.]\r\n   * @return {void}\r\n   */\r\n  off(type, listener) {\r\n    if (!this.events.hasOwnProperty(type)) return;\r\n\r\n    let index = this.events[type].indexOf(listener);\r\n    if (index !== -1) this.events[type].splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Dispatch the event.\r\n   *\r\n   * @param  {string} name [String representing the event type to listen for.]\r\n   * @param  {array} args [Adding custom data to be retured to listener.]\r\n   * @return {void}\r\n   */\r\n  dispatchEvent(type, args) {\r\n    if (!this.events.hasOwnProperty(type)) return;\r\n\r\n    if (!args || !args.length) args = [];\r\n\r\n    let events = this.events[type];\r\n    for (let i = 0, t = events.length; i < t; i++) {\r\n      events[i].apply(null, args);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect when images have been loaded.\r\n   * @param  {nodelist} nodeList [NodeList.]\r\n   * @param  {Function} callback [Function triggered after all images have been loaded.]\r\n   * @return {void}\r\n   */\r\n  imagesLoaded(nodeList, callback) {\r\n    let imageCounter = 0;\r\n\r\n    this.on('loaded', function(evt, target) {\r\n      [].forEach.call(nodeList, node => {\r\n        if (node === target) {\r\n          imageCounter++;\r\n\r\n          if (nodeList.length === imageCounter) {\r\n            callback.apply(null, [nodeList]);\r\n            imageCounter = 0;\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a debounced function that delays invoking func until after wait\r\n   *  milliseconds have elapsed since the last time the debounced function was\r\n   *  invoked.\r\n   *\r\n   * @param  {function} func [Function to debounce.]\r\n   * @param  {integer} wait [To to wait.]\r\n   * @param  {boolean} immediate [Immediately invode function.]\r\n   * @return {function} [Debounced function.]\r\n   */\r\n  debounce(func, wait, immediate) {\r\n    let timeout;\r\n\r\n    return () => {\r\n      let args = arguments,\r\n      callNow = immediate && !timeout;\r\n\r\n      clearTimeout(timeout);\r\n\r\n      timeout = setTimeout(() => {\r\n        timeout = null;\r\n\r\n        if (!immediate) func.apply(this, args);\r\n      }, wait);\r\n\r\n      if (callNow) func.apply(this, args);\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get imlazy instance via it's element.\r\n *\r\n * @param {HTMLElement} element [HTML element.]\r\n * @return {Imlazy} [Imlazy instance.]\r\n */\r\nImlazy.data = function(element) {\r\n  // Make sure it's not empty.\r\n  if (element !== null) {\r\n    let id = element.imlazyGUID;\r\n    return instances[id];\r\n  } else {\r\n    console.error('[imlazy] could not get Imlazy instance from %s', element);\r\n  }\r\n};\r\n\r\n// Replace/Create the global namespace\r\nwindow.Imlazy = Imlazy;\r\n\r\nexport default Imlazy;\r\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","/**\r\n * Polyfill for `object.assign`.\r\n *\r\n * @link https://polyfill.io/v2/docs/features/#Object_assign\r\n */\r\nif (!('assign' in Object)) {\r\n  Object.assign = function assign(target, source) { // eslint-disable-line no-unused-vars\r\n    for (var index = 1, key, src; index < arguments.length; ++index) {\r\n      src = arguments[index];\r\n\r\n      for (key in src) {\r\n        if (Object.prototype.hasOwnProperty.call(src, key)) {\r\n          target[key] = src[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./shim/object.assign.js"],"sourceRoot":""}